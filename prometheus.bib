
@misc{adamPrometheusFlaskExporter2022,
  title = {Prometheus {{Flask}} Exporter},
  author = {Adam, Viktor},
  year = {2022},
  month = apr,
  abstract = {Prometheus exporter for Flask applications},
  copyright = {MIT},
  keywords = {flask,metrics,prometheus-exporter}
}

@misc{ChartsStablePrometheusoperator,
  title = {Charts/Stable/Prometheus-Operator at Master {$\cdot$} Helm/Charts},
  journal = {GitHub},
  abstract = {{$\warning$}Ô∏è(OBSOLETE) Curated applications for Kubernetes. Contribute to helm/charts development by creating an account on GitHub.},
  howpublished = {https://github.com/helm/charts},
  langid = {english}
}

@misc{CloudNativeComputinga,
  title = {Cloud {{Native Computing Foundation}}},
  journal = {Cloud Native Computing Foundation},
  abstract = {Cloud Native Computing Foundation (CNCF) serves as the vendor-neutral home for many of the fastest-growing open source projects},
  howpublished = {https://www.cncf.io/},
  langid = {american},
  file = {/home/dimdakis/Zotero/storage/WSX4BT85/www.cncf.io.html}
}

@misc{ConfigureServiceAccountsa,
  title = {Configure {{Service Accounts}} for {{Pods}}},
  journal = {Kubernetes},
  abstract = {A service account provides an identity for processes that run in a Pod. Note: This document is a user introduction to Service Accounts and describes how service accounts behave in a cluster set up as recommended by the Kubernetes project. Your cluster administrator may have customized the behavior in your cluster, in which case this documentation may not apply.  When you (a human) access the cluster (for example, using kubectl), you are authenticated by the apiserver as a particular User Account (currently this is usually admin, unless your cluster administrator has customized your cluster).},
  chapter = {docs},
  howpublished = {https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/},
  langid = {english}
}

@misc{DataSources,
  title = {Data Sources},
  journal = {Grafana Labs},
  abstract = {Data sources Grafana supports many different storage backends for your time series data (data source). Refer to Add a data source for instructions on how \ldots},
  howpublished = {https://grafana.com/docs/grafana/latest/datasources/},
  langid = {english},
  file = {/home/dimdakis/Zotero/storage/RFDP4P6J/datasources.html}
}

@misc{DeployingUpgrading28,
  title = {Deploying and {{Upgrading}} (0.28.0)},
  howpublished = {https://strimzi.io/docs/operators/latest/deploying.html\#proc-metrics-kafka-deploy-options-str},
  file = {/home/dimdakis/Zotero/storage/ED7ERXAQ/deploying.html}
}

@misc{DeployPrometheusMonitoring,
  title = {Deploy {{Prometheus}} Monitoring Stack to {{Kubernetes}} with a Single {{Helm Chart}}},
  journal = {DEV Community},
  abstract = {kube-prometheus-stack   kube-prometheus-stack is a collection of Kubernetes manifests includ...},
  howpublished = {https://dev.to/kaitoii11/deploy-prometheus-monitoring-stack-to-kubernetes-with-a-single-helm-chart-2fbd},
  langid = {english},
  file = {/home/dimdakis/Zotero/storage/DJMGHTPH/deploy-prometheus-monitoring-stack-to-kubernetes-with-a-single-helm-chart-2fbd.html}
}

@misc{goltsmanDeployingTraefikIngress2019,
  title = {Deploying {{Traefik}} as {{Ingress Controller}} for {{Your Kubernetes Cluster}}},
  author = {Goltsman, Kirill},
  year = {2019},
  month = may,
  journal = {Supergiant.io},
  abstract = {You might already know from our previous tutorials about how to use Kubernetes Services to distribute traffic between multiple backends\ldots},
  langid = {english},
  file = {/home/dimdakis/Zotero/storage/RLIRH7S5/deploying-traefik-as-ingress-controller-for-your-kubernetes-cluster-b03a0672ae0c.html}
}

@misc{GrafanaOpenObservabilitya,
  title = {Grafana: {{The}} Open Observability Platform},
  shorttitle = {Grafana},
  journal = {Grafana Labs},
  abstract = {Grafana is the open source analytics \& monitoring solution for every database.},
  howpublished = {https://grafana.com/},
  langid = {english},
  file = {/home/dimdakis/Zotero/storage/TVSYD3R8/grafana.com.html}
}

@misc{GrafanaPrometheusSetup,
  title = {Grafana and {{Prometheus Setup With Strimzi}}, a.k.a. {{Kafka}} on {{Kubernetes}}. - {{DZone Integration}}},
  journal = {dzone.com},
  abstract = {A software developer gives a quick tutorial on how to use Strimzi to integrate Prometheus into a Java-based application. Read on to learn more!},
  howpublished = {https://dzone.com/articles/grafana-and-prometheus-setup-with-strimzi-aka-kafk},
  langid = {english},
  file = {/home/dimdakis/Zotero/storage/IRLNV8E6/grafana-and-prometheus-setup-with-strimzi-aka-kafk.html}
}

@misc{gregoryTypesPrometheusMetrics2019,
  title = {The 4 {{Types Of Prometheus Metrics}}},
  author = {Gregory, Tom},
  year = {2019},
  month = dec,
  journal = {Tom Gregory},
  abstract = {Prometheus is an excellent tool for gathering metrics from your application so that you can better understand how it's behaving. When deciding how to publish metrics, you'll have 4 types of metrics to choose from. In this article you'll discover what are the different types of Prometheus metrics, how to decide which one is right for a specific scenario, and how to query them. Overview If you're new to Prometheus, or monitoring in general, be sure to check out my Monitoring A Spring Boot Application, Part 2: Prometheus article, from my series about monitoring a Spring Boot application. As a},
  chapter = {Monitoring},
  langid = {british},
  file = {/home/dimdakis/Zotero/storage/E3PAF8YK/the-four-types-of-prometheus-metrics.html}
}

@misc{GunicornPythonWSGI,
  title = {Gunicorn - {{Python WSGI HTTP Server}} for {{UNIX}}},
  howpublished = {https://gunicorn.org/},
  file = {/home/dimdakis/Zotero/storage/WCUQPM5V/gunicorn.org.html}
}

@misc{HowSetupPrometheus2021,
  title = {How {{To Setup Prometheus Node Exporter On Kubernetes}}},
  year = {2021},
  month = apr,
  abstract = {This guide will walk you through the Prometheus node exporter setup on a Kubernetes cluster and integrate Prometheus scrape config to scrape the node metrics.},
  chapter = {KUBERNETES},
  howpublished = {https://devopscube.com/node-exporter-kubernetes/},
  langid = {american},
  file = {/home/dimdakis/Zotero/storage/PEV68FQX/node-exporter-kubernetes.html}
}

@misc{JMXExporter2022,
  title = {{{JMX Exporter}}},
  year = {2022},
  month = apr,
  abstract = {A process for exposing JMX Beans via HTTP for Prometheus consumption},
  copyright = {Apache-2.0},
  howpublished = {Prometheus},
  keywords = {java-agent,jmx,mbean,monitoring,prometheus,prometheus-exporter}
}

@misc{Kubeprometheusstack34Prometheus,
  title = {Kube-Prometheus-Stack 34.7.1 {$\cdot$} Prometheus/Prometheus-Community},
  abstract = {kube-prometheus-stack collects Kubernetes manifests, Grafana dashboards, and Prometheus rules combined with documentation and scripts to provide easy to operate end-to-end Kubernetes cluster monitoring with Prometheus using the Prometheus Operator.},
  howpublished = {https://artifacthub.io/packages/helm/prometheus-community/kube-prometheus-stack},
  langid = {english},
  file = {/home/dimdakis/Zotero/storage/H82ZACHF/kube-prometheus-stack.html}
}

@misc{MonitoringPythonFlask2020,
  title = {Monitoring {{Python Flask}} Microservices with {{Prometheus}} {$\cdot$} {{Viktor Adam}}'s Blog},
  year = {2020},
  month = may,
  journal = {Viktor Adam's blog},
  abstract = {Learn about how easy it is to monitor your Python Flask applications with Prometheus using an exporter library!},
  howpublished = {https://blog.viktoradam.net/2020/05/11/prometheus-flask-exporter/},
  langid = {american},
  file = {/home/dimdakis/Zotero/storage/HHDHK55J/prometheus-flask-exporter.html}
}

@misc{mutaiSetupPrometheusGrafana2021,
  title = {Setup {{Prometheus}} and {{Grafana}} on {{Kubernetes}} Using Prometheus-Operator | {{ComputingForGeeks}}},
  author = {Mutai, Josphat},
  year = {2021},
  month = jul,
  abstract = {Monitoring Production Kubernetes Cluster(s) is an important and progressive operation for any Cluster Administrator. There are myriad of solutions that fall},
  chapter = {Containers},
  howpublished = {https://computingforgeeks.com/setup-prometheus-and-grafana-on-kubernetes/},
  langid = {american},
  file = {/home/dimdakis/Zotero/storage/HRZHCFK5/setup-prometheus-and-grafana-on-kubernetes.html}
}

@misc{NodeExporter2022,
  title = {Node Exporter},
  year = {2022},
  month = apr,
  abstract = {Exporter for machine metrics},
  copyright = {Apache-2.0},
  howpublished = {Prometheus},
  keywords = {host-metrics,machine-metrics,metrics,node-metrics,procfs,prometheus,prometheus-exporter,system-information,system-metrics}
}

@misc{NodeExporterFull,
  title = {Node {{Exporter Full}} Dashboard for {{Grafana}}},
  journal = {Grafana Labs},
  abstract = {Data visualization \& monitoring with support for Graphite, InfluxDB, Prometheus, Elasticsearch and many more databases},
  howpublished = {https://grafana.com/grafana/dashboards/1860},
  langid = {american},
  file = {/home/dimdakis/Zotero/storage/4NHHX2JD/1860.html}
}

@misc{PodMonitorVsServiceMonitor,
  title = {{{PodMonitor}} vs {{ServiceMonitor}} What Is the Difference? {$\cdot$} {{Issue}} \#3119 {$\cdot$} Prometheus-Operator/Prometheus-Operator},
  shorttitle = {{{PodMonitor}} vs {{ServiceMonitor}} What Is the Difference?},
  journal = {GitHub},
  abstract = {Hi, I\&\#39;m new to prometheus-operator and I do not see difference between ServiceMonitor and PodMonitor. Documentation describes them as: ServiceMonitor, which declaratively specifies how groups o...},
  howpublished = {https://github.com/prometheus-operator/prometheus-operator/issues/3119},
  langid = {english},
  file = {/home/dimdakis/Zotero/storage/T85THI35/3119.html}
}

@misc{prometheusAlertmanagerPrometheus,
  title = {Alertmanager | {{Prometheus}}},
  author = {Prometheus},
  abstract = {An open-source monitoring system with a dimensional data model, flexible query language, efficient time series database and modern alerting approach.},
  howpublished = {https://prometheus.io/docs/alerting/latest/alertmanager/},
  langid = {english},
  file = {/home/dimdakis/Zotero/storage/KG5K55BG/alertmanager.html}
}

@misc{prometheusClientLibrariesPrometheus,
  title = {Client Libraries | {{Prometheus}}},
  author = {Prometheus},
  abstract = {An open-source monitoring system with a dimensional data model, flexible query language, efficient time series database and modern alerting approach.},
  howpublished = {https://prometheus.io/docs/instrumenting/clientlibs/},
  langid = {english},
  file = {/home/dimdakis/Zotero/storage/KRCZU57J/clientlibs.html}
}

@misc{prometheusExportersIntegrationsPrometheus,
  title = {Exporters and Integrations | {{Prometheus}}},
  author = {Prometheus},
  abstract = {An open-source monitoring system with a dimensional data model, flexible query language, efficient time series database and modern alerting approach.},
  howpublished = {https://prometheus.io/docs/instrumenting/exporters/},
  langid = {english},
  file = {/home/dimdakis/Zotero/storage/UIM8KV9C/exporters.html}
}

@misc{PrometheusflaskexporterPyPI,
  title = {Prometheus-Flask-Exporter {$\cdot$} {{PyPI}}},
  howpublished = {https://pypi.org/project/prometheus-flask-exporter/},
  file = {/home/dimdakis/Zotero/storage/K64RMWBM/prometheus-flask-exporter.html}
}

@misc{prometheusOverviewPrometheusa,
  title = {Overview | {{Prometheus}}},
  author = {Prometheus},
  abstract = {An open-source monitoring system with a dimensional data model, flexible query language, efficient time series database and modern alerting approach.},
  howpublished = {https://prometheus.io/docs/introduction/overview/},
  langid = {english},
  file = {/home/dimdakis/Zotero/storage/BSC92HTX/overview.html}
}

@misc{prometheusPrometheusMonitoringSystemb,
  title = {Prometheus - {{Monitoring}} System \& Time Series Database},
  author = {Prometheus},
  abstract = {An open-source monitoring system with a dimensional data model, flexible query language, efficient time series database and modern alerting approach.},
  howpublished = {https://prometheus.io/},
  langid = {english},
  file = {/home/dimdakis/Zotero/storage/WJEDL5WE/prometheus.io.html}
}

@misc{prometheusQueryFunctionsPrometheus,
  title = {Query Functions | {{Prometheus}}},
  author = {Prometheus},
  abstract = {An open-source monitoring system with a dimensional data model, flexible query language, efficient time series database and modern alerting approach.},
  howpublished = {https://prometheus.io/docs/prometheus/latest/querying/functions/},
  langid = {english},
  file = {/home/dimdakis/Zotero/storage/47R679NA/functions.html}
}

@misc{prometheusQueryingBasicsPrometheus,
  title = {Querying Basics | {{Prometheus}}},
  author = {Prometheus},
  abstract = {An open-source monitoring system with a dimensional data model, flexible query language, efficient time series database and modern alerting approach.},
  howpublished = {https://prometheus.io/docs/prometheus/latest/querying/basics/},
  langid = {english},
  file = {/home/dimdakis/Zotero/storage/XKC9L7VG/basics.html}
}

@misc{ReillyMicroservicesAdoption2020,
  title = {O'{{Reilly}}'s {{Microservices Adoption}} in 2020 {{Report Finds}} That 92\% of {{Organizations}} Are {{Experiencing Success}} with {{Microservices}}},
  year = {2020},
  month = jul,
  abstract = {O'Reilly, the premier source for insight-driven learning on technology and business, today released the survey findings of its latest report, ``Microse},
  howpublished = {https://www.businesswire.com/news/home/20200716005101/en/O\%E2\%80\%99Reilly\%E2\%80\%99s-Microservices-Adoption-in-2020-Report-Finds-that-92-of-Organizations-are-Experiencing-Success-with-Microservices},
  langid = {english},
  file = {/home/dimdakis/Zotero/storage/VABHFAER/O‚ÄôReilly‚Äôs-Microservices-Adoption-in-2020-Report-Finds-that-92-of-Organizations-are-Experie.html}
}

@misc{StrimziDocumentation12,
  title = {Strimzi {{Documentation}} (0.12.2)},
  howpublished = {https://strimzi.io/docs/0.12.2/},
  file = {/home/dimdakis/Zotero/storage/ZYHXI5VQ/0.12.2.html}
}

@misc{UsingPodMonitorScraping,
  title = {Using {{PodMonitor}} for Scraping {{Kafka}} Related Metrics by Ppatierno {$\cdot$} {{Pull Request}} \#3351 {$\cdot$} Strimzi/Strimzi-Kafka-Operator},
  journal = {GitHub},
  abstract = {Type of change Bugfix Description After some analysis on the current Prometheus configurations (ServiceMonitor, PodMonitor, and additional ones) I have got the following results: the kubernetes\_...},
  howpublished = {https://github.com/strimzi/strimzi-kafka-operator/pull/3351},
  langid = {english},
  file = {/home/dimdakis/Zotero/storage/K4S8QIMD/3351.html}
}

@misc{UsingRBACAuthorization,
  title = {Using {{RBAC Authorization}}},
  journal = {Kubernetes},
  abstract = {Role-based access control (RBAC) is a method of regulating access to computer or network resources based on the roles of individual users within your organization. RBAC authorization uses the rbac.authorization.k8s.io API group to drive authorization decisions, allowing you to dynamically configure policies through the Kubernetes API. To enable RBAC, start the API server with the --authorization-mode flag set to a comma-separated list that includes RBAC; for example: kube-apiserver --authorization-mode=Example,RBAC --other-options --more-options API objects The RBAC API declares four kinds of Kubernetes object: Role, ClusterRole, RoleBinding and ClusterRoleBinding.},
  chapter = {docs},
  howpublished = {https://kubernetes.io/docs/reference/access-authn-authz/rbac/},
  langid = {english}
}


